{
  "swagger": "2.0",
  "info": {
    "title": "MyCashly API",
    "description": "API for MyCashly Finance App that allows users to manage their finances",
    "version": "1.0.0"
  },

  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter 'Bearer' [space] and then your token in the input below. Example: 'Bearer [your token]'"
    }
  },

  "paths": {
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create a new user",
        "description": "Create a new user with the input payload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/UserAlreadyExistsResponse"
            }
          },

          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },

          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "Sign in a user",
        "description": "Sign in a user with the input payload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be signed in",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignInParams"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "User signed in successfully",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/auth/refresh-token": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh access token",
        "description": "Refresh access token with the input payload",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Refresh token object that needs to be refreshed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshTokenParams"
            }
          }
        ],

        "responses": {
          "200": {
            "description": "Access token refreshed successfully",
            "schema": {
              "$ref": "#/definitions/Tokens"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Get user profile",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "$ref": "#/definitions/GetUserResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/UserNotFoundResponse"
            }
          },

          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/users": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user by ID",
        "description": "Update user profile",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile updated successfully",
            "schema": {
              "$ref": "#/definitions/UpdateUserResponse"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/UserNotFoundResponse"
            }
          },

          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/UserAlreadyExistsResponse"
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },

      "delete": {
        "tags": ["Users"],
        "summary": "Delete user by ID",
        "description": "Delete user profile",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile deleted successfully",
            "schema": {
              "$ref": "#/definitions/GetUserResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/UserNotFoundResponse"
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/users/balance": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user balance",
        "description": "Get user balance",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User balance retrieved successfully",
            "schema": {
              "$ref": "#/definitions/UserBalance"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/UserNotFoundResponse"
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/categories": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get all categories",
        "description": "Get all categories",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Categories retrieved successfully",
            "schema": {
              "$ref": "#/definitions/Categories"
            }
          },
          "404": {
            "description": "User not found or category not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "[User not found] or [Category not found]"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/transactions": {
      "post": {
        "tags": ["Transactions"],
        "summary": "Create a new transaction",
        "description": "Create a new transaction with the input payload",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Transaction object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTransactionParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Transaction created successfully",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },
          "404": {
            "description": "User not found or transaction not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "[User not found] or [Transaction not found]"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },

      "get": {
        "tags": ["Transactions"],
        "summary": "Get all transactions by userId, filtered by month, year, and optionally type",
        "description": "Retrieve transactions filtered by month, year, and optionally type.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "description": "The month to filter transactions.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 11
            }
          },
          {
            "in": "query",
            "name": "year",
            "description": "The year to filter transactions.",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 2024
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "The type of transactions to filter (optional). Values can be 'EXPENSE', 'RECEIVES', or 'INVESTMENT'.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["EXPENSE", "RECEIVES", "INVESTMENT"],
              "example": "EXPENSE"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },
          "404": {
            "description": "Transaction not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Transaction not found"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    },

    "/transactions/{transactionId}": {
      "patch": {
        "tags": ["Transactions"],
        "summary": "Update transaction by ID",
        "description": "Update transaction with the input payload",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "ID of transaction to update",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Transaction object that needs to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTransactionParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction updated successfully",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/InvalidInputResponse"
            }
          },
          "404": {
            "description": "User not found or transaction not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "[User not found] or [Transaction not found]"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      },

      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete transaction by ID",
        "description": "Delete transaction",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "ID of transaction to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction deleted successfully",
            "schema": {
              "$ref": "#/definitions/Transaction"
            }
          },
          "404": {
            "description": "User not found or transaction not found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "[User not found] or [Transaction not found]"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/InvalidCredentialsError"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/InternalServerErrorResponse"
            }
          }
        }
      }
    }
  },

  "definitions": {
    "CreateUserParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Lucas Farias"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "12345678"
        }
      }
    },

    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Lucas Farias"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "12345678"
        }
      }
    },

    "Tokens": {
      "type": "object",
      "properties": {
        "accessToken": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkYzBlZTI3Ny03YjhmLTRiOWItYjlkNy01NjljYzE1ZjQ3NGUiLCJpYXQiOjE3MzYyNjk0NjcsImV4cCI6MTczNjI3MzA2N30.XZrtwLlCtJAOpthXMSnj0HM421YDdz7ihdeid1YrUo0"
        },
        "refreshTokenId": {
          "type": "string",
          "example": "165e3b0c-f74f-49cd-b63e-c24016657b71"
        }
      }
    },

    "SignInParams": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@gmail.com",
          "required": true
        },

        "password": {
          "type": "string",
          "example": "12345678",
          "required": true
        }
      }
    },

    "RefreshTokenParams": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "example": "165e3b0c-f74f-49cd-b63e-c24016657b71",
          "required": true
        }
      }
    },

    "GetUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Lucas Farias"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@gmail.com"
        }
      }
    },

    "UpdateUserParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Lucas Farias"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@gmail.com"
        },

        "password": {
          "type": "string",
          "example": "12345678"
        }
      }
    },

    "UpdateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Lucas Farias"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "example@gmail.com"
        },
        "password": {
          "type": "string",
          "example": "$2a$12$g0NdYovncbaqKCAZ7Yqfsum0wMPlaFWYJ5m/HGWJWOJijDCrA3OMy"
        }
      }
    },

    "UserBalance": {
      "type": "object",
      "properties": {
        "expenses": {
          "type": "number",
          "example": 500
        },
        "incomes": {
          "type": "number",
          "example": 1500
        },
        "investments": {
          "type": "number",
          "example": 1000
        },
        "balance": {
          "type": "number",
          "example": 2000
        }
      }
    },

    "Categories": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "userId ": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "example": "Food"
          },
          "type": {
            "type": "string",
            "example": "EXPENSE"
          }
        }
      }
    },

    "CreateTransactionParams": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Lunch"
        },
        "value": {
          "type": "number",
          "example": 500
        },
        "date": {
          "type": "string",
          "example": "2024-12-17T14:57:22.802Z"
        },
        "type": {
          "type": "string",
          "example": "EXPENSE"
        }
      }
    },

    "Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "userId ": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "categoryId": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Lunch"
        },
        "value": {
          "type": "number",
          "example": 500
        },
        "type": {
          "type": "string",
          "example": "EXPENSE"
        },
        "date": {
          "type": "string",
          "example": "2024-12-17T14:57:22.802Z"
        }
      }
    },

    "UpdateTransactionParams": {
      "type": "object",
      "properties": {
        "categoryId": {
          "type": "string",
          "example": "123e4567-e89b-12d3-a456-426614174000",
          "format": "uuid"
        },
        "name": {
          "type": "string",
          "example": "Lunch"
        },
        "value": {
          "type": "number",
          "example": 500
        },
        "date": {
          "type": "string",
          "example": "2024-12-17T14:57:22.802Z"
        },
        "type": {
          "type": "string",
          "example": "EXPENSE"
        }
      }
    },

    "InternalServerErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Internal Server Error"
        }
      }
    },

    "UserNotFoundResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User not found"
        }
      }
    },

    "InvalidCredentialsError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Unauthorized"
        }
      }
    },

    "InvalidInputResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Invalid input"
        }
      }
    },

    "UserAlreadyExistsResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User already exists"
        }
      }
    }
  }
}
